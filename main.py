import telebot
from telebot import types
import random
from randYearGenerator import random_year
import xml.etree.ElementTree as ET

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot("8190916259:AAEsF_m4TwjVHr_vLbu6I4W1YzfOaU2BXEo")
user_data = {}
questions = {}
quiz_list = []
highest_score = 10

tree = ET.parse('database.xml')
root = tree.getroot()

# –ü–∞—Ä—Å–∏–Ω–≥
for elem in root.findall('quiz_element'):
    quiz_item = {
        'question': elem.findtext('question', default='').strip(),
        'options': random_year(elem.findtext('year', default='').strip()),
        'year': elem.findtext('year', default='').strip(),
        'description': elem.findtext('description', default='').strip()
    }
    quiz_list.append(quiz_item)

# –¢–µ–ø–µ—Ä—å quiz_list ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å ‚Äî –æ–¥–∏–Ω quiz_element

# def get_random_quiz():
#     return list(random.sample(questions, k=min(10, len(questions))))

def get_random_quiz_element():
    quiz = random.choice(quiz_list)
    return quiz['question'], quiz['options'], quiz['year'], quiz['description']

def get_random_quiz():
    quiz_elements=[]

    while len(set(quiz_elements)) < 10:
        quiz_elements.append(get_random_quiz_element())
    return quiz_elements

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ —Ç–æ—Ç, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—á–∫–æ–≤
def count_score(correct_year, answer):
    if 10>=abs(answer-correct_year)>=5: return 1
    if 5>abs(answer-correct_year)>2: return 2
    if 2>=abs(answer-correct_year)>=1: return 4
    if abs(answer-correct_year)==0: return 8
    return 0


# –§—É–Ω–∫—Ü–∏–∏
@bot.message_handler(commands=['start'])
def start(message):
    text = f'''
    ‚ö°Ô∏è –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç "–î–∞—Ç–∞–ì—Ä–∞–¥", –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å–≤–µ–∂–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –æ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞—Ç–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö XX –≤–µ–∫–∞.
    –í–∞—Å –∂–¥–µ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞! 

    ‚ñ∂Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "Quiz".
    ‚ùì –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "Stats".'''
    user_data[message.chat.id] = {
        "score": 0,
        "hardmode_score": 0,
        "current": 0,
        "quiz": get_random_quiz()
    }

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    quiz_button = types.KeyboardButton("Quiz")
    stats_button = types.KeyboardButton("Stats")
    markup.add(quiz_button, stats_button)
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == "Quiz")
def ask_question(message):
    user = user_data[message.chat.id]
    if user["current"] >= highest_score:
        text = '''
        üëÄ –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞? –ù–∞–∂–º–∏—Ç–µ "Quiz".
        üìñ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "Stats"
        '''
        bot.send_message(message.chat.id, f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ {user['score']} –∏–∑ {highest_score} –±–∞–ª–ª–æ–≤.")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        quiz_button = types.KeyboardButton("Quiz")
        stats_button = types.KeyboardButton("Stats")
        markup.add(quiz_button, stats_button)
        bot.send_message(message.chat.id, text, reply_markup=markup)
        return

    q = user["quiz"][user["current"]]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in q["options"]:
        markup.add(types.KeyboardButton(opt))
    bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å {user['current'] + 1}: {q['question']}", reply_markup=markup)


@bot.message_handler(func=lambda m: True)
def handle_answer(message):
    user = user_data.get(message.chat.id)
    if not user or user["current"] >= 10:
        return

    q = user["quiz"][user["current"]]
    correct = q["correct"]

    user["hardmode_score"] += count_score(correct, q["answer"])

    if message.text == correct:
        user["score"] += 1
        response = f"‚úÖ –í–µ—Ä–Ω–æ! {q['info']}"
    elif message.text in q["options"]:
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}.\n –í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {q['info']}"
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–æ–ø–æ–∫ü•∫")
        return

    user["current"] += 1
    bot.send_message(message.chat.id, response)
    ask_question(message)


# @bot.message_handler(commands=['test'])
# def test(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
#     itembtn1 = types.KeyboardButton('1945')
#     itembtn2 = types.KeyboardButton('1917')
#     itembtn3 = types.KeyboardButton('1983')
#     markup.add(itembtn1, itembtn2, itembtn3)
#     bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏, {message.from_user.first_name}:", reply_markup=markup)
#

@bot.message_handler()
def echo(message):
    bot.send_message(message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –∞ ¬´{message.text}¬ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π.", parse_mode="html")


bot.polling(none_stop=True)